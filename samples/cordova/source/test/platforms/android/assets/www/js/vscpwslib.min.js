//
// vscpwslib javascript websocket library
// Copyright (C) 2012-2014 Ake Hedman, Grodans Paradis AB
// <akhe@grodansparadis.com>
//
// Licence:     
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version
// 2 of the License, or (at your option) any later version.
// 
// This file is part of the VSCP (http://www.vscp.org) 
// 
// This file is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this file see the file COPYING.  If not, write to
// the Free Software Foundation, 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.
// 
// As a special exception, if other files instantiate templates or use macros
// or inline functions from this file, or you compile this file and link it
// with other works to produce a work based on this file, this file does not
// by itself cause the resulting work to be covered by the GNU General Public
// License. However the source code for this file must still be made available
// in accordance with section (3) of the GNU General Public License.
// 
// This exception does not invalidate any other reasons why a work based on
// this file might be covered by the GNU General Public License.
// 
// Alternative licenses for VSCP & Friends may be arranged by contacting 
// Grodans Paradis AB at info@grodansparadis.com, http://www.grodansparadis.com
//
// Open widget package spec. http://www.w3.org/TR/widgets/
//

// Uncomment to get debug messages
var vscpws_debug = true;


var VSCP_CLASS1_PROTOCOL=0;
var VSCP_CLASS1_ALARM=1;
var VSCP_CLASS1_SECURITY=2;
var VSCP_CLASS1_MEASUREMENT=10;
var VSCP_CLASS1_DATA=15;
var VSCP_CLASS1_INFORMATION=20;
var VSCP_CLASS1_CONTROL=30;
var VSCP_CLASS1_MULTIMEDIA=40;
var VSCP_CLASS1_AOL=50;
var VSCP_CLASS1_MEASUREMENT64=60;
var VSCP_CLASS1_MEASUREZONE=65;
var VSCP_CLASS1_SETVALUEZONE=85;
var VSCP_CLASS1_WEATHER=90;
var VSCP_CLASS1_WEATHER_FORECAST=95;
var VSCP_CLASS1_PHONE=100;
var VSCP_CLASS1_LIN=101;
var VSCP_CLASS1_DISPLAY=102;
var VSCP_CLASS1_RC5=110;
var VSCP_CLASS1_GPS=206;
var VSCP_CLASS1_WIRELESS=212;
var VSCP_CLASS1_LOG=509;
var VSCP_CLASS1_LAB=510;
var VSCP_CLASS1_LOCAL=511;

// Level I classes on Level II

var VSCP_CLASS2_LEVEL1_PROTOCOL= ( 512 + 0 );
var VSCP_CLASS2_LEVEL1_ALARM = ( 512 + 1 );
var VSCP_CLASS2_LEVEL1_SECURITY = ( 512 + 2 );
var VSCP_CLASS2_LEVEL1_MEASUREMENT = ( 512 + 10 );
var VSCP_CLASS2_LEVEL1_DATA = ( 512 + 15 );
var VSCP_CLASS2_LEVEL1_INFORMATION = ( 512 + 20 );
var VSCP_CLASS2_LEVEL1_CONTROL = ( 512 + 30 );
var VSCP_CLASS2_LEVEL1_MULTIMEDIA = ( 512 + 40 );
var VSCP_CLASS2_LEVEL1_AOL = ( 512 + 50 );
var VSCP_CLASS2_MEASUREMENT64 = ( 512 + 60 );
var VSCP_CLASS2_MEASUREZONE	= ( 512 + 65 );
var VSCP_CLASS2_SETVALUEZONE = ( 512 + 85 );
var VSCP_CLASS2_LEVEL1_PHONE = ( 512 + 100 );
var VSCP_CLASS2_LEVEL1_LIN = ( 512 + 101 );
var VSCP_CLASS2_LEVEL1_RC5 = ( 512 + 110 );
var VSCP_CLASS2_LEVEL1_GPS = ( 512 + 206 );
var VSCP_CLASS2_LEVEL1_WIRELESS = ( 512 + 212 );
var VSCP_CLASS2_LEVEL1_LOG = ( 512 + 509 );
var VSCP_CLASS2_LEVEL1_LAB = ( 512 + 510 );
var VSCP_CLASS2_LEVEL1_LOCAL = ( 512 + 511 );

// Level II classes
var VSCP_CLASS2_PROTOCOL = ( 1024 );
var VSCP_CLASS2_CONTROL = ( 1025 );
var VSCP_CLASS2_INFORMATION = ( 1026 );
var VSCP_CLASS2_TEXT2SPEECH = ( 1028 );
var VSCP_CLASS2_CUSTOM = ( 1029 );
var VSCP_CLASS2_DISPLAY = ( 1030);
var VSCP_CLASS2_VSCPD = ( 65535 );

var VSCP_TYPE_UNDEFINED = 0;

// VSCP Protocol Functionality
var VSCP_TYPE_PROTOCOL_SEGCTRL_HEARTBEAT = 1;
var VSCP_TYPE_PROTOCOL_NEW_NODE_ONLINE = 2;
var VSCP_TYPE_PROTOCOL_PROBE_ACK = 3;
var VSCP_TYPE_PROTOCOL_SET_NICKNAME = 6;
var VSCP_TYPE_PROTOCOL_NICKNAME_ACCEPTED = 7;
var VSCP_TYPE_PROTOCOL_DROP_NICKNAME = 8;
var VSCP_TYPE_PROTOCOL_READ_REGISTER = 9;
var VSCP_TYPE_PROTOCOL_RW_RESPONSE = 10;
var VSCP_TYPE_PROTOCOL_WRITE_REGISTER = 11;
var VSCP_TYPE_PROTOCOL_ENTER_BOOT_LOADER = 12;
var VSCP_TYPE_PROTOCOL_ACK_BOOT_LOADER = 13;
var VSCP_TYPE_PROTOCOL_NACK_BOOT_LOADER = 14;
var VSCP_TYPE_PROTOCOL_START_BLOCK = 15;
var VSCP_TYPE_PROTOCOL_BLOCK_DATA = 16;
var VSCP_TYPE_PROTOCOL_BLOCK_DATA_ACK = 17;
var VSCP_TYPE_PROTOCOL_BLOCK_DATA_NACK = 18;
var VSCP_TYPE_PROTOCOL_PROGRAM_BLOCK_DATA = 19;
var VSCP_TYPE_PROTOCOL_PROGRAM_BLOCK_DATA_ACK = 20;
var VSCP_TYPE_PROTOCOL_PROGRAM_BLOCK_DATA_NACK = 21;
var VSCP_TYPE_PROTOCOL_ACTIVATE_NEW_IMAGE = 22;
var VSCP_TYPE_PROTOCOL_RESET_DEVICE = 23;
var VSCP_TYPE_PROTOCOL_PAGE_READ = 24;
var VSCP_TYPE_PROTOCOL_PAGE_WRITE = 25;
var VSCP_TYPE_PROTOCOL_RW_PAGE_RESPONSE = 26;
var VSCP_TYPE_PROTOCOL_HIGH_END_SERVER_PROBE = 27;
var VSCP_TYPE_PROTOCOL_HIGH_END_SERVER_RESPONSE = 28;
var VSCP_TYPE_PROTOCOL_INCREMENT_REGISTER = 29;
var VSCP_TYPE_PROTOCOL_DECREMENT_REGISTER = 30;
var VSCP_TYPE_PROTOCOL_WHO_IS_THERE = 31;
var VSCP_TYPE_PROTOCOL_WHO_IS_THERE_RESPONSE = 32;
var VSCP_TYPE_PROTOCOL_GET_MATRIX_INFO = 33;
var VSCP_TYPE_PROTOCOL_GET_MATRIX_INFO_RESPONSE = 34;
var VSCP_TYPE_PROTOCOL_GET_EMBEDDED_MDF = 35;
var VSCP_TYPE_PROTOCOL_GET_EMBEDDED_MDF_RESPONSE = 36;
var VSCP_TYPE_PROTOCOL_EXTENDED_PAGE_READ = 37;
var VSCP_TYPE_PROTOCOL_EXTENDED_PAGE_WRITE = 38;
var VSCP_TYPE_PROTOCOL_EXTENDED_PAGE_RESPONSE = 39;
var VSCP_TYPE_PROTOCOL_GET_EVENT_INTEREST = 40;
var VSCP_TYPE_PROTOCOL_GET_EVENT_INTEREST_RESPONSE = 41;
var VSCP_TYPE_PROTOCOL_ACTIVATE_NEW_IMAGE_ACK = 48;
var VSCP_TYPE_PROTOCOL_ACTIVATE_NEW_IMAGE_NACK = 49;
var VSCP_TYPE_PROTOCOL_START_BLOCK_ACK = 50;
var VSCP_TYPE_PROTOCOL_START_BLOCK_NACK = 51;

// Class 1 (0x01) -- ALARM
var VSCP_TYPE_ALARM_GENERAL = 0;
var VSCP_TYPE_ALARM_WARNING = 1;
var VSCP_TYPE_ALARM_ALARM = 2;
var VSCP_TYPE_ALARM_SOUND = 3;
var VSCP_TYPE_ALARM_LIGHT = 4;
var VSCP_TYPE_ALARM_POWER = 5;
var VSCP_TYPE_ALARM_EMERGENCY_STOP = 6;
var VSCP_TYPE_ALARM_EMERGENCY_PAUSE = 7;
var VSCP_TYPE_ALARM_EMERGENCY_RESET = 8;
var VSCP_TYPE_ALARM_EMERGENCY_RESUME = 9;

// Class 2 (0x02) -- SECURITY
var VSCP_TYPE_SECURITY_GENERAL = 0;
var VSCP_TYPE_SECURITY_MOTION = 1;
var VSCP_TYPE_SECURITY_GLASS_BREAK = 2;
var VSCP_TYPE_SECURITY_BEAM_BREAK = 3;
var VSCP_TYPE_SECURITY_SENSOR_TAMPER = 4;
var VSCP_TYPE_SECURITY_SHOCK_SENSOR = 5;
var VSCP_TYPE_SECURITY_SMOKE_SENSOR = 6;
var VSCP_TYPE_SECURITY_HEAT_SENSOR = 7;
var VSCP_TYPE_SECURITY_PANIC_SWITCH = 8;
var VSCP_TYPE_SECURITY_DOOR_OPEN = 9;
var VSCP_TYPE_SECURITY_WINDOW_OPEN = 10;
var VSCP_TYPE_SECURITY_CO_SENSOR = 11;
var VSCP_TYPE_SECURITY_FROST_DETECTED = 12;
var VSCP_TYPE_SECURITY_FLAME_DETECTED = 13;
var VSCP_TYPE_SECURITY_OXYGEN_LOW = 14;
var VSCP_TYPE_SECURITY_WEIGHT_DETECTED = 15;
var VSCP_TYPE_SECURITY_WATER_DETECTED = 16;
var VSCP_TYPE_SECURITY_CONDENSATION_DETECTED = 17;
var VSCP_TYPE_SECURITY_SOUND_DETECTED = 18;
var VSCP_TYPE_SECURITY_HARMFUL_SOUND_LEVEL = 19;

// Class 10 (0x0a) -- MEASUREMENT
var VSCP_TYPE_MEASUREMENT_GENERAL = 0;
var VSCP_TYPE_MEASUREMENT_COUNT = 1;
var VSCP_TYPE_MEASUREMENT_LENGTH = 2;
var VSCP_TYPE_MEASUREMENT_MASS = 3;
var VSCP_TYPE_MEASUREMENT_TIME = 4;
var VSCP_TYPE_MEASUREMENT_ELECTRIC_CURRENT = 5;
var VSCP_TYPE_MEASUREMENT_TEMPERATURE = 6;
var VSCP_TYPE_MEASUREMENT_AMOUNT_OF_SUBSTANCE = 7;
var VSCP_TYPE_MEASUREMENT_INTENSITY_OF_LIGHT = 8;
var VSCP_TYPE_MEASUREMENT_FREQUENCY = 9;
var VSCP_TYPE_MEASUREMENT_RADIOACTIVITY = 10;	// or other random event
var VSCP_TYPE_MEASUREMENT_FORCE = 11;
var VSCP_TYPE_MEASUREMENT_PRESSURE = 12;
var VSCP_TYPE_MEASUREMENT_ENERGY = 13;
var VSCP_TYPE_MEASUREMENT_POWER = 14;
var VSCP_TYPE_MEASUREMENT_ELECTRICAL_CHARGE = 15;
var VSCP_TYPE_MEASUREMENT_ELECTRICAL_POTENTIAL = 16;	// Voltage
var VSCP_TYPE_MEASUREMENT_ELECTRICAL_CAPACITANCE = 17;
var VSCP_TYPE_MEASUREMENT_ELECTRICAL_RECISTANCE = 18;
var VSCP_TYPE_MEASUREMENT_ELECTRICAL_CONDUCTANCE = 19;
var VSCP_TYPE_MEASUREMENT_MAGNETIC_FIELD_STRENGTH = 20;
var VSCP_TYPE_MEASUREMENT_MAGNETIC_FLUX = 21;
var VSCP_TYPE_MEASUREMENT_MAGNETIC_FLUX_DENSITY = 22;
var VSCP_TYPE_MEASUREMENT_INDUCTANCE = 23;
var VSCP_TYPE_MEASUREMENT_FLUX_OF_LIGHT = 24;
var VSCP_TYPE_MEASUREMENT_ILLUMINANCE = 25;
var VSCP_TYPE_MEASUREMENT_RADIATION_DOSE = 26;
var VSCP_TYPE_MEASUREMENT_CATALYTIC_ACITIVITY = 27;
var VSCP_TYPE_MEASUREMENT_VOLUME = 28;
var VSCP_TYPE_MEASUREMENT_SOUND_INTENSITY = 29;
var VSCP_TYPE_MEASUREMENT_ANGLE = 30;
var VSCP_TYPE_MEASUREMENT_POSITION = 31;
var VSCP_TYPE_MEASUREMENT_SPEED = 32;
var VSCP_TYPE_MEASUREMENT_ACCELERATION = 33;
var VSCP_TYPE_MEASUREMENT_TENSION = 34;
var VSCP_TYPE_MEASUREMENT_HUMIDITY = 35; // Damp/moist (Hygrometer reading)
var VSCP_TYPE_MEASUREMENT_FLOW = 36;
var VSCP_TYPE_MEASUREMENT_THERMAL_RESISTANCE = 37;
var VSCP_TYPE_MEASUREMENT_REFRACTIVE_POWER = 38;
var VSCP_TYPE_MEASUREMENT_DYNAMIC_VISCOSITY = 39;
var VSCP_TYPE_MEASUREMENT_SOUND_IMPEDANCE = 40;
var VSCP_TYPE_MEASUREMENT_SOUND_RESISTANCE = 41;
var VSCP_TYPE_MEASUREMENT_ELECTRIC_ELASTANCE = 42;
var VSCP_TYPE_MEASUREMENT_LUMINOUS_ENERGY = 43;
var VSCP_TYPE_MEASUREMENT_LUMINANCE = 44;
var VSCP_TYPE_MEASUREMENT_CHEMICAL_CONCENTRATION = 45;
var VSCP_TYPE_MEASUREMENT_RESERVED = 46;
var VSCP_TYPE_MEASUREMENT_DOSE_EQVIVALENT = 47;
var VSCP_TYPE_MEASUREMENT_DEWPOINT = 49;
var VSCP_TYPE_MEASUREMENT_RELATIVE_LEVEL = 50;
var VSCP_TYPE_MEASUREMENT_ALTITUDE = 51;
var VSCP_TYPE_MEASUREMENT_AREA = 52;
var VSCP_TYPE_MEASUREMENT_RADIANT_INTENSITY = 53;
var VSCP_TYPE_MEASUREMENT_RADIANCE = 54;
var VSCP_TYPE_MEASUREMENT_IRRADIANCE = 55;
var VSCP_TYPE_MEASUREMENT_SPECTRAL_RADIANCE = 56;
var VSCP_TYPE_MEASUREMENT_SPECTRAL_IRRADIANCE = 57;


// Class 15 (0x0f) -- DATA
var VSCP_TYPE_DATA_GENERAL = 0;
var VSCP_TYPE_DATA_IO = 1;
var VSCP_TYPE_DATA_AD = 2;
var VSCP_TYPE_DATA_DA = 3;
var VSCP_TYPE_DATA_RELATIVE_STRENGTH = 4;
var VSCP_TYPE_DATA_SIGNAL_LEVEL = 5;
var VSCP_TYPE_DATA_SIGNAL_QUALITY = 6;

// class 20 (0x14) -- INFORMATION
var VSCP_TYPE_INFORMATION_GENERAL = 0;
var VSCP_TYPE_INFORMATION_BUTTON = 1;
var VSCP_TYPE_INFORMATION_MOUSE = 2;
var VSCP_TYPE_INFORMATION_ON = 3;
var VSCP_TYPE_INFORMATION_OFF = 4;
var VSCP_TYPE_INFORMATION_ALIVE = 5;
var VSCP_TYPE_INFORMATION_TERMINATING = 6;
var VSCP_TYPE_INFORMATION_OPENED = 7;
var VSCP_TYPE_INFORMATION_CLOSED = 8;
var VSCP_TYPE_INFORMATION_NODE_HEARTBEAT = 9;
var VSCP_TYPE_INFORMATION_BELOW_LIMIT = 10;
var VSCP_TYPE_INFORMATION_ABOVE_LIMIT = 11;
var VSCP_TYPE_INFORMATION_PULSE = 12;
var VSCP_TYPE_INFORMATION_ERROR = 13;
var VSCP_TYPE_INFORMATION_RESUMED = 14;
var VSCP_TYPE_INFORMATION_PAUSED = 15;
var VSCP_TYPE_INFORMATION_SLEEP = 16;
var VSCP_TYPE_INFORMATION_GOOD_MORNING = 17;
var VSCP_TYPE_INFORMATION_GOOD_DAY = 18;
var VSCP_TYPE_INFORMATION_GOOD_AFTERNOON = 19;
var VSCP_TYPE_INFORMATION_GOOD_EVENING = 20;
var VSCP_TYPE_INFORMATION_GOOD_NIGHT = 21;
var VSCP_TYPE_INFORMATION_SEE_YOU_SOON = 22;
var VSCP_TYPE_INFORMATION_GOODBYE = 23;
var VSCP_TYPE_INFORMATION_STOP = 24;
var VSCP_TYPE_INFORMATION_START = 25;
var VSCP_TYPE_INFORMATION_RESET_COMPLETED = 26;
var VSCP_TYPE_INFORMATION_INTERRUPTED = 27;
var VSCP_TYPE_INFORMATION_PREPARING_TO_SLEEP = 28;
var VSCP_TYPE_INFORMATION_WOKEN_UP = 29;
var VSCP_TYPE_INFORMATION_DUSK = 30;
var VSCP_TYPE_INFORMATION_DAWN = 31;
var VSCP_TYPE_INFORMATION_ACTIVE = 32;
var VSCP_TYPE_INFORMATION_INACTIVE = 33;
var VSCP_TYPE_INFORMATION_BUSY = 34;
var VSCP_TYPE_INFORMATION_IDLE = 35;
var VSCP_TYPE_INFORMATION_STREAM_DATA = 36;
var VSCP_TYPE_INFORMATION_TOKEN_ACTIVITY = 37;
var VSCP_TYPE_INFORMATION_STREAM_DATA_WITH_ZONE = 38;
var VSCP_TYPE_INFORMATION_CONFIRM = 39;
var VSCP_TYPE_INFORMATION_LEVEL_CHANGED = 40;
var VSCP_TYPE_INFORMATION_WARNING = 41;
var VSCP_TYPE_INFORMATION_STATE = 42;
var VSCP_TYPE_INFORMATION_ACTION_TRIGGER = 43;
var VSCP_TYPE_INFORMATION_SUNRISE = 44;
var VSCP_TYPE_INFORMATION_SUNSET = 45;
var VSCP_TYPE_INFORMATION_START_OF_RECORD = 46;
var VSCP_TYPE_INFORMATION_END_OF_RECORD = 47;
var VSCP_TYPE_INFORMATION_PRESET_ACTIVE = 48;
var VSCP_TYPE_INFORMATION_DETECT = 49;
var VSCP_TYPE_INFORMATION_OVERFLOW = 50;
var VSCP_TYPE_INFORMATION_BIG_LEVEL_CHANGED = 51;
var VSCP_TYPE_INFORMATION_CIVIL_SUNRISE_TWILIGHT = 52;
var VSCP_TYPE_INFORMATION_CIVIL_SUNSET_TWILIGHT = 53;
var VSCP_TYPE_INFORMATION_CIVIL_NAUTICAL_SUNRISE_TWILIGHT = 54;
var VSCP_TYPE_INFORMATION_CIVIL_NAUTICAL_SUNSET_TWILIGHT = 55;
var VSCP_TYPE_INFORMATION_CIVIL_ASTRONOMICAL_SUNRISE_TWILIGHT = 56;
var VSCP_TYPE_INFORMATION_CIVIL_ASTRONOMICAL_SUNSET_TWILIGHT = 57;
var VSCP_TYPE_INFORMATION_CALCULATED_NOON = 58;

// class 30 (0x1E) -- CONTROL
var VSCP_TYPE_CONTROL_GENERAL = 0;
var VSCP_TYPE_CONTROL_MUTE = 1;
var VSCP_TYPE_CONTROL_ALL_LAMPS = 2;
var VSCP_TYPE_CONTROL_OPEN = 3;
var VSCP_TYPE_CONTROL_CLOSE = 4;
var VSCP_TYPE_CONTROL_TURNON = 5;
var VSCP_TYPE_CONTROL_TURNOFF = 6;
var VSCP_TYPE_CONTROL_START = 7;
var VSCP_TYPE_CONTROL_STOP = 8;
var VSCP_TYPE_CONTROL_RESET = 9;
var VSCP_TYPE_CONTROL_INTERRUPT = 10;
var VSCP_TYPE_CONTROL_SLEEP = 11;
var VSCP_TYPE_CONTROL_WAKEUP = 12;
var VSCP_TYPE_CONTROL_RESUME = 13;
var VSCP_TYPE_CONTROL_PAUSE = 14;
var VSCP_TYPE_CONTROL_ACTIVATE = 15;
var VSCP_TYPE_CONTROL_DEACTIVATE = 16;
var VSCP_TYPE_CONTROL_DIM_LAMPS = 20;
var VSCP_TYPE_CONTROL_CHANGE_CHANNEL = 21;
var VSCP_TYPE_CONTROL_CHANGE_LEVEL = 22;
var VSCP_TYPE_CONTROL_RELATIVE_CHANGE_LEVEL = 23;
var VSCP_TYPE_CONTROL_MEASUREMENT_REQUEST = 24;
var VSCP_TYPE_CONTROL_STREAM_DATA = 25;
var VSCP_TYPE_CONTROL_SYNC = 26;
var VSCP_TYPE_CONTROL_ZONED_STREAM_DATA = 27;
var VSCP_TYPE_CONTROL_SET_PRESET = 28;
var VSCP_TYPE_CONTROL_TOGGLE_STATE = 29;
var VSCP_TYPE_CONTROL_TIMED_PULE_ON = 30;
var VSCP_TYPE_CONTROL_TIMED_PULSE_OFF = 31;
var VSCP_TYPE_CONTROL_SET_COUNTRY_LANGUAGE = 32;
var VSCP_TYPE_CONTROL_BIG_CHANGE_LEVEL = 33

// class 40 (0x28) -- MULTIMEDIA
var VSCP_TYPE_MULTIMEDIA_GENERA = 0;
var VSCP_TYPE_MULTIMEDIA_PLAYBACK = 1;
var VSCP_TYPE_MULTIMEDIA_NAVIGATOR_KEY_ENG = 2;
var VSCP_TYPE_MULTIMEDIA_ADJUST_CONTRAST = 3;
var VSCP_TYPE_MULTIMEDIA_ADJUST_FOCUS = 4;
var VSCP_TYPE_MULTIMEDIA_ADJUST_TINT = 5;
var VSCP_TYPE_MULTIMEDIA_ADJUST_COLOUR_BALANCE = 6;
var VSCP_TYPE_MULTIMEDIA_ADJUST_BRIGHTNESS = 7;
var VSCP_TYPE_MULTIMEDIA_ADJUST_HUE = 8;
var VSCP_TYPE_MULTIMEDIA_ADJUST_BASS = 9;
var VSCP_TYPE_MULTIMEDIA_ADJUST_TREBLE = 10;
var VSCP_TYPE_MULTIMEDIA_ADJUST_MASTER_VOLUME = 11;
var VSCP_TYPE_MULTIMEDIA_ADJUST_FRONT_VOLUME = 12;
var VSCP_TYPE_MULTIMEDIA_ADJUST_CENTRE_VOLUME = 13;
var VSCP_TYPE_MULTIMEDIA_ADJUST_REAR_VOLUME = 14;
var VSCP_TYPE_MULTIMEDIA_ADJUST_SIDE_VOLUME = 15;
var VSCP_TYPE_MULTIMEDIA_ADJUST_SELECT_DISK = 20;
var VSCP_TYPE_MULTIMEDIA_ADJUST_SELECT_TRACK = 21;
var VSCP_TYPE_MULTIMEDIA_ADJUST_SELECT_ALBUM = 22;
var VSCP_TYPE_MULTIMEDIA_ADJUST_SELECT_CHANNEL = 23;
var VSCP_TYPE_MULTIMEDIA_ADJUST_SELECT_PAGE = 24;
var VSCP_TYPE_MULTIMEDIA_ADJUST_SELECT_CHAPTER = 25;
var VSCP_TYPE_MULTIMEDIA_ADJUST_SELECT_SCREEN_FORMAT = 26;
var VSCP_TYPE_MULTIMEDIA_ADJUST_SELECT_INPUT_SOURCE = 27;
var VSCP_TYPE_MULTIMEDIA_ADJUST_SELECT_OUTPUT = 28;
var VSCP_TYPE_MULTIMEDIA_RECORD = 29;
var VSCP_TYPE_MULTIMEDIA_SET_RECORDING_VOLUME = 30;
var VSCP_TYPE_MULTIMEDIA_TIVO_FUNCTION = 40;
var VSCP_TYPE_MULTIMEDIA_GET_CURRENT_TITLE = 50;
var VSCP_TYPE_MULTIMEDIA_SET_POSITION = 51;
var VSCP_TYPE_MULTIMEDIA_GET_MEDIA_INFO = 52;
var VSCP_TYPE_MULTIMEDIA_REMOVE_ITEM = 53;
var VSCP_TYPE_MULTIMEDIA_REMOVE_ALL_ITEMS = 54;
var VSCP_TYPE_MULTIMEDIA_SAVE_ALBUM = 55;
var VSCP_TYPE_MULTIMEDIA_CONTROL = 60;
var VSCP_TYPE_MULTIMEDIA_CONTROL_RESPONSE = 61;

// class 50 (0x32) -- AOL
var VSCP_TYPE_AOL_GENERAL = 0;
var VSCP_TYPE_AOL_UNPLUGGED_POWER = 1; 
var VSCP_TYPE_AOL_UNPLUGGED_LAN = 2;
var VSCP_TYPE_AOL_CHASSIS_INTRUSION = 3;
var VSCP_TYPE_AOL_PROCESSOR_REMOVAL = 4;
var VSCP_TYPE_AOL_ENVIRONMENT_ERROR = 5;
var VSCP_TYPE_AOL_HIGH_TEMPERATURE = 6;
var VSCP_TYPE_AOL_FAN_SPEED = 7;
var VSCP_TYPE_AOL_VOLTAGE_FLUCTUATIONS = 8;
var VSCP_TYPE_AOL_OS_ERROR = 9;
var VSCP_TYPE_AOL_POWER_ON_ERROR = 10;
var VSCP_TYPE_AOL_SYSTEM_HUNG = 11;
var VSCP_TYPE_AOL_COMPONENT_FAILURE = 12;
var VSCP_TYPE_AOL_REBOOT_UPON_FAILURE = 13;
var VSCP_TYPE_AOL_REPAIR_OPERATING_SYSTEM = 14;
var VSCP_TYPE_AOL_UPDATE_BIOS_IMAGE = 15;
var VSCP_TYPE_AOL_UPDATE_DIAGNOSTIC_PROCEDURE = 16;

// class 60 (0x3C) -- CLASS1.MEASUREMENT64
// Types are the same as CLASS1.MEASUREMENT=10
var VSCP_TYPE_MEASUREMENT64_GENERAL = 0;
var VSCP_TYPE_MEASUREMENT64_COUNT = 1;
var VSCP_TYPE_MEASUREMENT64_LENGTH = 2;
var VSCP_TYPE_MEASUREMENT64_MASS = 3;
var VSCP_TYPE_MEASUREMENT64_TIME = 4;
var VSCP_TYPE_MEASUREMENT64_ELECTRIC_CURRENT = 5;
var VSCP_TYPE_MEASUREMENT64_TEMPERATURE = 6;
var VSCP_TYPE_MEASUREMENT64_AMOUNT_OF_SUBSTANCE = 7;
var VSCP_TYPE_MEASUREMENT64_INTENSITY_OF_LIGHT = 8;
var VSCP_TYPE_MEASUREMENT64_FREQUENCY = 9;
var VSCP_TYPE_MEASUREMENT64_RADIOACTIVITY = 10;	// or other random event
var VSCP_TYPE_MEASUREMENT64_FORCE = 11;
var VSCP_TYPE_MEASUREMENT64_PRESSURE = 12;
var VSCP_TYPE_MEASUREMENT64_ENERGY = 13;
var VSCP_TYPE_MEASUREMENT64_POWER = 14;
var VSCP_TYPE_MEASUREMENT64_ELECTRICAL_CHARGE = 15;
var VSCP_TYPE_MEASUREMENT64_ELECTRICAL_POTENTIAL = 16;	// Voltage
var VSCP_TYPE_MEASUREMENT64_ELECTRICAL_CAPACITANCE = 17;
var VSCP_TYPE_MEASUREMENT64_ELECTRICAL_RECISTANCE = 18;
var VSCP_TYPE_MEASUREMENT64_ELECTRICAL_CONDUCTANCE = 19;
var VSCP_TYPE_MEASUREMENT64_MAGNETIC_FIELD_STRENGTH = 20;
var VSCP_TYPE_MEASUREMENT64_MAGNETIC_FLUX = 21;
var VSCP_TYPE_MEASUREMENT64_MAGNETIC_FLUX_DENSITY = 22;
var VSCP_TYPE_MEASUREMENT64_INDUCTANCE = 23;
var VSCP_TYPE_MEASUREMENT64_FLUX_OF_LIGHT = 24;
var VSCP_TYPE_MEASUREMENT64_ILLUMINANCE = 25;
var VSCP_TYPE_MEASUREMENT64_RADIATION_DOSE  = 26;
var VSCP_TYPE_MEASUREMENT64_CATALYTIC_ACITIVITY = 27;
var VSCP_TYPE_MEASUREMENT64_VOLUME = 28;
var VSCP_TYPE_MEASUREMENT64_SOUND_INTENSITY = 29;
var VSCP_TYPE_MEASUREMENT64_ANGLE = 30;
var VSCP_TYPE_MEASUREMENT64_POSITION = 31;
var VSCP_TYPE_MEASUREMENT64_SPEED = 32;
var VSCP_TYPE_MEASUREMENT64_ACCELERATION = 33;
var VSCP_TYPE_MEASUREMENT64_TENSION = 34;
var VSCP_TYPE_MEASUREMENT64_HUMIDITY = 35;	// Damp/moist (Hygrometer reading)
var VSCP_TYPE_MEASUREMENT64_FLOW = 36;
var VSCP_TYPE_MEASUREMENT64_THERMAL_RESISTANCE = 37;
var VSCP_TYPE_MEASUREMENT64_REFRACTIVE_POWER = 38;
var VSCP_TYPE_MEASUREMENT64_DYNAMIC_VISCOSITY = 39;
var VSCP_TYPE_MEASUREMENT64_SOUND_IMPEDANCE = 40;
var VSCP_TYPE_MEASUREMENT64_SOUND_RESISTANCE = 41;
var VSCP_TYPE_MEASUREMENT64_ELECTRIC_ELASTANCE = 42;
var VSCP_TYPE_MEASUREMENT64_LUMINOUS_ENERGY = 43;
var VSCP_TYPE_MEASUREMENT64_LUMINANCE = 44;
var VSCP_TYPE_MEASUREMENT64_CHEMICAL_CONCENTRATION = 45;
var VSCP_TYPE_MEASUREMENT64_RESERVED = 46;
var VSCP_TYPE_MEASUREMENT64_DOSE_EQVIVALENT = 47;
var VSCP_TYPE_MEASUREMENT64_DEWPOINT = 49;
var VSCP_TYPE_MEASUREMENT64_RELATIVE_LEVEL = 50;
var VSCP_TYPE_MEASUREMENT64_ALTITUDE = 51;
var VSCP_TYPE_MEASUREMENT64_AREA = 52;
var VSCP_TYPE_MEASUREMENT64_RADIANT_INTENSITY = 53;
var VSCP_TYPE_MEASUREMENT64_RADIANCE = 54;
var VSCP_TYPE_MEASUREMENT64_IRRADIANCE = 55;
var VSCP_TYPE_MEASUREMENT64_SPECTRAL_RADIANCE = 56;
var VSCP_TYPE_MEASUREMENT64_SPECTRAL_IRRADIANCE = 57;

// class 65 (0x41) -- CLASS1.MEASUREZONE 
// Types are the same as CLASS1.MEASUREMENT=10
var VSCP_TYPE_MEASUREZONE_GENERAL = 0;
var VSCP_TYPE_MEASUREZONE_COUNT = 1;
var VSCP_TYPE_MEASUREZONE_LENGTH = 2;
var VSCP_TYPE_MEASUREZONE_MASS = 3;
var VSCP_TYPE_MEASUREZONE_TIME = 4;
var VSCP_TYPE_MEASUREZONE_ELECTRIC_CURRENT = 5;
var VSCP_TYPE_MEASUREZONE_TEMPERATURE = 6;
var VSCP_TYPE_MEASUREZONE_AMOUNT_OF_SUBSTANCE = 7;
var VSCP_TYPE_MEASUREZONE_INTENSITY_OF_LIGHT = 8;
var VSCP_TYPE_MEASUREZONE_FREQUENCY = 9;
var VSCP_TYPE_MEASUREZONE_RADIOACTIVITY = 10;	// or other random event
var VSCP_TYPE_MEASUREZONE_FORCE = 11;
var VSCP_TYPE_MEASUREZONE_PRESSURE = 12;
var VSCP_TYPE_MEASUREZONE_ENERGY = 13;
var VSCP_TYPE_MEASUREZONE_POWER = 14;
var VSCP_TYPE_MEASUREZONE_ELECTRICAL_CHARGE = 15;
var VSCP_TYPE_MEASUREZONE_ELECTRICAL_POTENTIAL = 16;	// Voltage
var VSCP_TYPE_MEASUREZONE_ELECTRICAL_CAPACITANCE = 17;
var VSCP_TYPE_MEASUREZONE_ELECTRICAL_RECISTANCE = 18;
var VSCP_TYPE_MEASUREZONE_ELECTRICAL_CONDUCTANCE = 19;
var VSCP_TYPE_MEASUREZONE_MAGNETIC_FIELD_STRENGTH = 20;
var VSCP_TYPE_MEASUREZONE_MAGNETIC_FLUX = 21;
var VSCP_TYPE_MEASUREZONE_MAGNETIC_FLUX_DENSITY = 22;
var VSCP_TYPE_MEASUREZONE_INDUCTANCE = 23;
var VSCP_TYPE_MEASUREZONE_FLUX_OF_LIGHT = 24;
var VSCP_TYPE_MEASUREZONE_ILLUMINANCE = 25;
var VSCP_TYPE_MEASUREZONE_RADIATION_DOSE = 26;
var VSCP_TYPE_MEASUREZONE_CATALYTIC_ACITIVITY = 27;
var VSCP_TYPE_MEASUREZONE_VOLUME = 28;
var VSCP_TYPE_MEASUREZONE_SOUND_INTENSITY = 29;
var VSCP_TYPE_MEASUREZONE_ANGLE = 30;
var VSCP_TYPE_MEASUREZONE_POSITION = 31;
var VSCP_TYPE_MEASUREZONE_SPEED = 32;
var VSCP_TYPE_MEASUREZONE_ACCELERATION = 33;
var VSCP_TYPE_MEASUREZONE_TENSION = 34;
var VSCP_TYPE_MEASUREZONE_HUMIDITY = 35;	// Damp/moist (Hygrometer reading)
var VSCP_TYPE_MEASUREZONE_FLOW = 36;
var VSCP_TYPE_MEASUREZONE_THERMAL_RESISTANCE = 37;
var VSCP_TYPE_MEASUREZONE_REFRACTIVE_POWER = 38;
var VSCP_TYPE_MEASUREZONE_DYNAMIC_VISCOSITY = 39;
var VSCP_TYPE_MEASUREZONE_SOUND_IMPEDANCE = 40;
var VSCP_TYPE_MEASUREZONE_SOUND_RESISTANCE = 41;
var VSCP_TYPE_MEASUREZONE_ELECTRIC_ELASTANCE = 42;
var VSCP_TYPE_MEASUREZONE_LUMINOUS_ENERGY = 43;
var VSCP_TYPE_MEASUREZONE_LUMINANCE = 44;
var VSCP_TYPE_MEASUREZONE_CHEMICAL_CONCENTRATION = 45;
var VSCP_TYPE_MEASUREZONE_RESERVED = 46;
var VSCP_TYPE_MEASUREZONE_DOSE_EQVIVALENT = 47;
var VSCP_TYPE_MEASUREZONE_DEWPOINT = 49;
var VSCP_TYPE_MEASUREZONE_RELATIVE_LEVEL = 50;
var VSCP_TYPE_MEASUREZONE_ALTITUDE = 51;
var VSCP_TYPE_MEASUREZONE_AREA = 52;
var VSCP_TYPE_MEASUREZONE_RADIANT_INTENSITY = 53;
var VSCP_TYPE_MEASUREZONE_RADIANCE = 54;
var VSCP_TYPE_MEASUREZONE_IRRADIANCE = 55;
var VSCP_TYPE_MEASUREZONE_SPECTRAL_RADIANCE = 56;
var VSCP_TYPE_MEASUREZONE_SPECTRAL_IRRADIANCE = 57;

// class 85 (0x55) -- CLASS1.SETVALUEZONE 
// Types are the same as CLASS1.MEASUREMENT=10
var VSCP_TYPE_SETVALUEZONE_GENERAL = 0;
var VSCP_TYPE_SETVALUEZONE_COUNT = 1;
var VSCP_TYPE_SETVALUEZONE_LENGTH = 2;
var VSCP_TYPE_SETVALUEZONE_MASS = 3;
var VSCP_TYPE_SETVALUEZONE_TIME = 4;
var VSCP_TYPE_SETVALUEZONE_ELECTRIC_CURRENT = 5;
var VSCP_TYPE_SETVALUEZONE_TEMPERATURE = 6;
var VSCP_TYPE_SETVALUEZONE_AMOUNT_OF_SUBSTANCE = 7;
var VSCP_TYPE_SETVALUEZONE_INTENSITY_OF_LIGHT = 8;
var VSCP_TYPE_SETVALUEZONE_FREQUENCY = 9;
var VSCP_TYPE_SETVALUEZONE_RADIOACTIVITY = 10;	// or other random event
var VSCP_TYPE_SETVALUEZONE_FORCE = 11;
var VSCP_TYPE_SETVALUEZONE_PRESSURE = 12;
var VSCP_TYPE_SETVALUEZONE_ENERGY = 13;
var VSCP_TYPE_SETVALUEZONE_POWER = 14;
var VSCP_TYPE_SETVALUEZONE_ELECTRICAL_CHARGE = 15;
var VSCP_TYPE_SETVALUEZONE_ELECTRICAL_POTENTIAL = 16;	// Voltage
var VSCP_TYPE_SETVALUEZONE_ELECTRICAL_CAPACITANCE = 17;
var VSCP_TYPE_SETVALUEZONE_ELECTRICAL_RECISTANCE = 18;
var VSCP_TYPE_SETVALUEZONE_ELECTRICAL_CONDUCTANCE = 19;
var VSCP_TYPE_SETVALUEZONE_MAGNETIC_FIELD_STRENGTH = 20;
var VSCP_TYPE_SETVALUEZONE_MAGNETIC_FLUX = 21;
var VSCP_TYPE_SETVALUEZONE_MAGNETIC_FLUX_DENSITY = 22;
var VSCP_TYPE_SETVALUEZONE_INDUCTANCE = 23;
var VSCP_TYPE_SETVALUEZONE_FLUX_OF_LIGHT = 24;
var VSCP_TYPE_SETVALUEZONE_ILLUMINANCE = 25;
var VSCP_TYPE_SETVALUEZONE_RADIATION_DOSE = 26;
var VSCP_TYPE_SETVALUEZONE_CATALYTIC_ACITIVITY = 27;
var VSCP_TYPE_SETVALUEZONE_VOLUME = 28;
var VSCP_TYPE_SETVALUEZONE_SOUND_INTENSITY = 29;
var VSCP_TYPE_SETVALUEZONE_ANGLE = 30;
var VSCP_TYPE_SETVALUEZONE_POSITION = 31;
var VSCP_TYPE_SETVALUEZONE_SPEED = 32;
var VSCP_TYPE_SETVALUEZONE_ACCELERATION = 33;
var VSCP_TYPE_SETVALUEZONE_TENSION = 34;
var VSCP_TYPE_SETVALUEZONE_HUMIDITY = 35;	// Damp/moist (Hygrometer reading)
var VSCP_TYPE_SETVALUEZONE_FLOW = 36;
var VSCP_TYPE_SETVALUEZONE_THERMAL_RESISTANCE = 37;
var VSCP_TYPE_SETVALUEZONE_REFRACTIVE_POWER = 38;
var VSCP_TYPE_SETVALUEZONE_DYNAMIC_VISCOSITY = 39;
var VSCP_TYPE_SETVALUEZONE_SOUND_IMPEDANCE = 40;
var VSCP_TYPE_SETVALUEZONE_SOUND_RESISTANCE = 41;
var VSCP_TYPE_SETVALUEZONE_ELECTRIC_ELASTANCE = 42;
var VSCP_TYPE_SETVALUEZONE_LUMINOUS_ENERGY = 43;
var VSCP_TYPE_SETVALUEZONE_LUMINANCE = 44;
var VSCP_TYPE_SETVALUEZONE_CHEMICAL_CONCENTRATION = 45;
var VSCP_TYPE_SETVALUEZONE_RESERVED = 46;
var VSCP_TYPE_SETVALUEZONE_DOSE_EQVIVALENT = 47;
var VSCP_TYPE_SETVALUEZONE_DEWPOINT = 49;
var VSCP_TYPE_SETVALUEZONE_RELATIVE_LEVEL = 50;
var VSCP_TYPE_SETVALUEZONE_ALTITUDE = 51;
var VSCP_TYPE_SETVALUEZONE_AREA = 52;
var VSCP_TYPE_SETVALUEZONE_RADIANT_INTENSITY = 53;
var VSCP_TYPE_SETVALUEZONE_RADIANCE = 54;
var VSCP_TYPE_SETVALUEZONE_IRRADIANCE = 55;
var VSCP_TYPE_SETVALUEZONE_SPECTRAL_RADIANCE = 56;
var VSCP_TYPE_SETVALUEZONE_SPECTRAL_IRRADIANCE = 57;

// class 90 (0x5A) -- WEATHER
var VSCP_TYPE_WEATHER_GENERAL = 0;
var VSCP_TYPE_WEATHER_SEASONS_WINTER = 1;
var VSCP_TYPE_WEATHER_SEASONS_SPRING = 2;
var VSCP_TYPE_WEATHER_SEASONS_SUMMER = 3;
var VSCP_TYPE_WEATHER_SEASONS_AUTUMN = 4;
var VSCP_TYPE_WEATHER_WIND_NONE = 5;
var VSCP_TYPE_WEATHER_WIND_LOW = 6;
var VSCP_TYPE_WEATHER_WIND_MEDIUM = 7;
var VSCP_TYPE_WEATHER_WIND_HIGH = 8;
var VSCP_TYPE_WEATHER_WIND_VERY_HIGH = 9;
var VSCP_TYPE_WEATHER_AIR_FOGGY = 10;
var VSCP_TYPE_WEATHER_AIR_FREEZING = 11;
var VSCP_TYPE_WEATHER_AIR_COLD = 12;
var VSCP_TYPE_WEATHER_AIR_VERY_COLD = 13;
var VSCP_TYPE_WEATHER_AIR_NORMAL = 14;
var VSCP_TYPE_WEATHER_AIR_HOT = 15;
var VSCP_TYPE_WEATHER_AIR_VERY_HOT = 16;
var VSCP_TYPE_WEATHER_AIR_POLLUTION_LOW = 17;
var VSCP_TYPE_WEATHER_AIR_POLLUTION_MEDIUM = 18;
var VSCP_TYPE_WEATHER_AIR_POLLUTION_HIGH = 19;
var VSCP_TYPE_WEATHER_AIR_HUMID = 20;
var VSCP_TYPE_WEATHER_AIR_DRY = 21;
var VSCP_TYPE_WEATHER_SOIL_HUMID = 22;
var VSCP_TYPE_WEATHER_SOIL_DRY = 23;
var VSCP_TYPE_WEATHER_RAIN_NONE = 24;
var VSCP_TYPE_WEATHER_RAIN_LIGHT = 25;
var VSCP_TYPE_WEATHER_RAIN_HEAVY = 26;
var VSCP_TYPE_WEATHER_RAIN_VERY_HEAVY = 27;
var VSCP_TYPE_WEATHER_SUN_NONE = 28;
var VSCP_TYPE_WEATHER_SUN_LIGHT = 29;
var VSCP_TYPE_WEATHER_SUN_HEAVY = 30;
var VSCP_TYPE_WEATHER_SNOW_NONE = 31;
var VSCP_TYPE_WEATHER_SNOW_LIGHT = 32;
var VSCP_TYPE_WEATHER_SNOW_HEAVY = 33;
var VSCP_TYPE_WEATHER_DEW_POINT = 34;
var VSCP_TYPE_WEATHER_STORM = 35;
var VSCP_TYPE_WEATHER_FLOOD = 36;
var VSCP_TYPE_WEATHER_EARTHQUAKE = 37;
var VSCP_TYPE_WEATHER_NUCLEAR_DISASTER = 38;
var VSCP_TYPE_WEATHER_FIRE = 39;
var VSCP_TYPE_WEATHER_LIGHTNING = 40;
var VSCP_TYPE_WEATHER_UV_RADIATION_LOW = 41;
var VSCP_TYPE_WEATHER_UV_RADIATION_MEDIUM = 42;
var VSCP_TYPE_WEATHER_UV_RADIATION_NORMAL = 43;
var VSCP_TYPE_WEATHER_UV_RADIATION_HIGH = 44;
var VSCP_TYPE_WEATHER_UV_RADIATION_VERY_HIGH = 45;
var VSCP_TYPE_WEATHER_WARNING_LEVEL1 = 46;
var VSCP_TYPE_WEATHER_WARNING_LEVEL2 = 47;
var VSCP_TYPE_WEATHER_WARNING_LEVEL3 = 48;
var VSCP_TYPE_WEATHER_WARNING_LEVEL4 = 49;
var VSCP_TYPE_WEATHER_WARNING_LEVEL5 = 50;
var VSCP_TYPE_WEATHER_ARMAGEDON = 51;

// class 95 (0x5F) -- WEATHER FORECAST
var VSCP_TYPE_WEATHER_FORECAST_GENERAL = 0;
var VSCP_TYPE_WEATHER_FORECAST_SEASONS_WINTER = 1;
var VSCP_TYPE_WEATHER_FORECAST_SEASONS_SPRING = 2;
var VSCP_TYPE_WEATHER_FORECAST_SEASONS_SUMMER = 3;
var VSCP_TYPE_WEATHER_FORECAST_SEASONS_AUTUMN = 4;
var VSCP_TYPE_WEATHER_FORECAST_WIND_NONE = 5;
var VSCP_TYPE_WEATHER_FORECAST_WIND_LOW = 6;
var VSCP_TYPE_WEATHER_FORECAST_WIND_MEDIUM = 7;
var VSCP_TYPE_WEATHER_FORECAST_WIND_HIGH = 8;
var VSCP_TYPE_WEATHER_FORECAST_WIND_VERY_HIGH = 9;
var VSCP_TYPE_WEATHER_FORECAST_AIR_FOGGY = 10;
var VSCP_TYPE_WEATHER_FORECAST_AIR_FREEZING = 11;
var VSCP_TYPE_WEATHER_FORECAST_AIR_COLD = 12;
var VSCP_TYPE_WEATHER_FORECAST_AIR_VERY_COLD = 13;
var VSCP_TYPE_WEATHER_FORECAST_AIR_NORMAL = 14;
var VSCP_TYPE_WEATHER_FORECAST_AIR_HOT = 15;
var VSCP_TYPE_WEATHER_FORECAST_AIR_VERY_HOT = 16;
var VSCP_TYPE_WEATHER_FORECAST_AIR_POLLUTION_LOW = 17;
var VSCP_TYPE_WEATHER_FORECAST_AIR_POLLUTION_MEDIUM = 18;
var VSCP_TYPE_WEATHER_FORECAST_AIR_POLLUTION_HIGH = 19;
var VSCP_TYPE_WEATHER_FORECAST_AIR_HUMID = 20;
var VSCP_TYPE_WEATHER_FORECAST_AIR_DRY = 21;
var VSCP_TYPE_WEATHER_FORECAST_SOIL_HUMID = 22;
var VSCP_TYPE_WEATHER_FORECAST_SOIL_DRY = 23;
var VSCP_TYPE_WEATHER_FORECAST_RAIN_NONE = 24;
var VSCP_TYPE_WEATHER_FORECAST_RAIN_LIGHT = 25;
var VSCP_TYPE_WEATHER_FORECAST_RAIN_HEAVY = 26;
var VSCP_TYPE_WEATHER_FORECAST_RAIN_VERY_HEAVY = 27;
var VSCP_TYPE_WEATHER_FORECAST_SUN_NONE = 28;
var VSCP_TYPE_WEATHER_FORECAST_SUN_LIGHT = 29;
var VSCP_TYPE_WEATHER_FORECAST_SUN_HEAVY = 30;
var VSCP_TYPE_WEATHER_FORECAST_SNOW_NONE = 31;
var VSCP_TYPE_WEATHER_FORECAST_SNOW_LIGHT = 32;
var VSCP_TYPE_WEATHER_FORECAST_SNOW_HEAVY = 33;
var VSCP_TYPE_WEATHER_FORECAST_DEW_POINT = 34;
var VSCP_TYPE_WEATHER_FORECAST_STORM = 35;
var VSCP_TYPE_WEATHER_FORECAST_FLOOD = 36;
var VSCP_TYPE_WEATHER_FORECAST_EARTHQUAKE = 37;
var VSCP_TYPE_WEATHER_FORECAST_NUCLEAR_DISASTER = 38;
var VSCP_TYPE_WEATHER_FORECAST_FIRE = 39;
var VSCP_TYPE_WEATHER_FORECAST_LIGHTNING = 40;
var VSCP_TYPE_WEATHER_FORECAST_UV_RADIATION_LOW = 41;
var VSCP_TYPE_WEATHER_FORECAST_UV_RADIATION_MEDIUM = 42;
var VSCP_TYPE_WEATHER_FORECAST_UV_RADIATION_NORMAL = 43;
var VSCP_TYPE_WEATHER_FORECAST_UV_RADIATION_HIGH = 44;
var VSCP_TYPE_WEATHER_FORECAST_UV_RADIATION_VERY_HIGH = 45;
var VSCP_TYPE_WEATHER_FORECAST_WARNING_LEVEL1 = 46;
var VSCP_TYPE_WEATHER_FORECAST_WARNING_LEVEL2 = 47;
var VSCP_TYPE_WEATHER_FORECAST_WARNING_LEVEL3 = 48;
var VSCP_TYPE_WEATHER_FORECAST_WARNING_LEVEL4 = 49;
var VSCP_TYPE_WEATHER_FORECAST_WARNING_LEVEL5 = 50;
var VSCP_TYPE_WEATHER_FORECAST_ARMAGEDON = 51;

// class 100 (0x64) -- PHONE
var VSCP_TYPE_PHONE_GENERAL = 0;
var VSCP_TYPE_PHONE_INCOMING_CALL = 1;
var VSCP_TYPE_PHONE_OUTGOING_CALL = 2;
var VSCP_TYPE_PHONE_RING = 3;
var VSCP_TYPE_PHONE_ANSWERE = 4;
var VSCP_TYPE_PHONE_HANGUP = 5;
var VSCP_TYPE_PHONE_GIVEUP = 6;
var VSCP_TYPE_PHONE_TRANSFER = 7;
var VSCP_TYPE_PHONE_DATABASE_INFO = 8;

// class 102 (0x66) -- DISPLAY
var VSCP_TYPE_DISPLAY_GENERAL = 0;
var VSCP_TYPE_DISPLAY_CLEAR_DISPLAY = 1;
var VSCP_TYPE_DISPLAY_POSITION_CURSOR = 2;
var VSCP_TYPE_DISPLAY_WRITE_DISPLAY = 3;
var VSCP_TYPE_DISPLAY_WRITE_DISPLAY_BUFFER = 4;
var VSCP_TYPE_DISPLAY_SHOW_DISPLAY_BUFFER = 5;
var VSCP_TYPE_DISPLAY_SET_DISPLAY_BUFFER_PARAM = 6;
var VSCP_TYPE_DISPLAY_SHOW_TEXT = 32;
var VSCP_TYPE_DISPLAY_SHOW_LED = 48;
var VSCP_TYPE_DISPLAY_SHOW_LED_COLOR = 49;

// class 110 (0x6E) -- REMOTE
var VSCP_TYPE_REMOTE_GENERAL = 0;
var VSCP_TYPE_REMOTE_RC5 = 1;
var VSCP_TYPE_REMOTE_SONY12 = 2;
var VSCP_TYPE_REMOTE_LIRC = 32;
var VSCP_TYPE_REMOTE_VSCP = 48;

// class 200 (0xC8) -- 1-WIRE
var VSCP_TYPE_1WIRE_GENERAL = 0;
var VSCP_TYPE_1WIRE_NEW_ID = 1;
var VSCP_TYPE_1WIRE_CONVERT = 2;
var VSCP_TYPE_1WIRE_READ_ROM = 3;
var VSCP_TYPE_1WIRE_MATCH_ROM = 4;
var VSCP_TYPE_1WIRE_SKIP_ROM = 5;
var VSCP_TYPE_1WIRE_SEARCH_ROM = 6;
var VSCP_TYPE_1WIRE_CONDITIONAL_SEARCH_ROM = 7;
var VSCP_TYPE_1WIRE_PROGRAM = 8;
var VSCP_TYPE_1WIRE_OVERDRIVE_SKIP_ROM = 9;
var VSCP_TYPE_1WIRE_OVERDRIVE_MATCH_ROM = 10;
var VSCP_TYPE_1WIRE_OVERDRIVE_READ_MEMORY = 11;
var VSCP_TYPE_1WIRE_OVERDRIVE_WRITE_MEMORY = 12;

// class 201 (0xC9) -- X10
var VSCP_TYPE_X10_GENERAL = 0;
var VSCP_TYPE_X10_STANDARD_MESSAGE_RECEIVE = 1;
var VSCP_TYPE_X10_EXTENDED_MESSAGE_RECEIVE = 2;
var VSCP_TYPE_X10_STANDARD_MESSAGE_SEND = 3;
var VSCP_TYPE_X10_EXTENDED_MESSAGE_SEND = 4;
var VSCP_TYPE_X10_SIMPLE_MESSAGE = 5;


// class 202 (0xCA) -- LON
var VSCP_TYPE_LON_GENERAL = 0;

// class 203 (0xCB) -- KNX/EIB
var VSCP_TYPE_EIB_GENERAL = 0;

// class 204 (0xCC) -- SNAP
var VSCP_TYPE_SNAP_GENERAL = 0;

// class 205 (0xCD) -- CBUS
var VSCP_TYPE_CBUS_GENERAL = 0;

// class 206 (0xCE) -- GPS
var VSCP_TYPE_GPS_GENERAL = 0;
var VSCP_TYPE_GPS_POSITION = 1;
var VSCP_TYPE_GPS_SATELLITES = 2;

// class 212 (0xD4) -- WIRELESS
var VSCP_TYPE_WIRELESS_GENERAL = 0;
var VSCP_TYPE_WIRELESS_GSM_CELL = 1;

// class 509 (0x1FD) -- LOG
var VSCP_TYPE_LOG_GENERAL = 0;
var VSCP_TYPE_LOG_MESSAGE = 1;
var VSCP_TYPE_LOG_START = 2;
var VSCP_TYPE_LOG_STOP = 3;
var VSCP_TYPE_LOG_LEVEL = 4;

// class 510 (0x1FE) -- LABORATORY
var VSCP_TYPE_LABORATORY_GENERAL = 0;

// class 511 (0x1FF) -- LOCAL
var VSCP_TYPE_LOCAL_GENERAL = 0;

///////////////////////////////////////////////////////////////////////////////
//				Level II
///////////////////////////////////////////////////////////////////////////////

// Level II Protocol functionality Class=1024 (0x400)
var VSCP2_TYPE_PROTOCOL_GENERAL = 0;
var VSCP2_TYPE_PROTOCOL_READ_REGISTER = 1;
var VSCP2_TYPE_PROTOCOL_WRITE_REGISTER = 2;
var VSCP2_TYPE_PROTOCOL_READ_WRITE_RESPONSE = 3;

// Level II Control functionality Class=1025 (0x401)
var VSCP2_TYPE_CONTROL_GENERAL = 0;

// Level II Information functionality Class=1026 (0x402)
var VSCP2_TYPE_INFORMATION_GENERAL = 0;
var VSCP2_TYPE_INFORMATION_TOKEN_ACTIVITY  = 1;

// Level II Text to speech functionality Class=1028 (0x404)
var VSCP2_TYPE_TEXT2SPEECH_GENERAL = 0;
var VSCP2_TYPE_TEXT2SPEECH_TALK = 1;

// Level II Custom functionality Class=1029 (0x405)
var VSCP2_TYPE_CUSTOM_GENERAL = 0;

// Level II Display functionality Class=1030 (0x406)
var VSCP2_TYPE_DISPLAY_GENERAL = 0;

// Level II VSCPD daemon functionality Class=65535 (0xFFFF)
var VSCP2_TYPE_VSCPD_GENERAL = 0;
var VSCP2_TYPE_VSCPD_LOOP = 1;
var VSCP2_TYPE_VSCPD_PAUSE = 3;
var VSCP2_TYPE_VSCPD_ACTIVATE = 4;
var VSCP2_TYPE_VSCPD_SECOND = 5;
var VSCP2_TYPE_VSCPD_MINUTE = 6;
var VSCP2_TYPE_VSCPD_HOUR = 7;
var VSCP2_TYPE_VSCPD_NOON = 8;
var VSCP2_TYPE_VSCPD_MIDNIGHT = 9;
var VSCP2_TYPE_VSCPD_WEEK = 11;
var VSCP2_TYPE_VSCPD_MONTH = 12;
var VSCP2_TYPE_VSCPD_QUARTER = 13;
var VSCP2_TYPE_VSCPD_YEAR = 14;
var VSCP2_TYPE_VSCPD_RANDOM_MINUTE = 15;
var VSCP2_TYPE_VSCPD_RANDOM_HOUR = 16;
var VSCP2_TYPE_VSCPD_RANDOM_DAY = 17;
var VSCP2_TYPE_VSCPD_RANDOM_WEEK = 18;
var VSCP2_TYPE_VSCPD_RANDOM_MONTH = 19;
var VSCP2_TYPE_VSCPD_RANDOM_YEAR = 20;
var VSCP2_TYPE_VSCPD_DUSK = 21;
var VSCP2_TYPE_VSCPD_DAWN = 22;
var VSCP2_TYPE_VSCPD_STARTING_UP = 23;
var VSCP2_TYPE_VSCPD_SHUTTING_DOWN = 24;
var VSCP2_TYPE_VSCPD_TIMER_STARTED = 25;
var VSCP2_TYPE_VSCPD_TIMER_PAUSED = 26;
var VSCP2_TYPE_VSCPD_TIMER_RESUMED = 27;
var VSCP2_TYPE_VSCPD_TIMER_STOPPED = 28;
var VSCP2_TYPE_VSCPD_TIMER_ELLAPSED = 29;



// How to use: https://gist.github.com/tbranyen/1049426
// Inspired by http://bit.ly/juSAWl
// Augment String.prototype to allow for easier formatting.  This implementation 
// doesn't completely destroy any existing String.prototype.format functions,
// and will stringify objects/arrays.
String.prototype.format = function(i, safe, arg) {
 
  function format() {
    var str = this, len = arguments.length+1;
 
    // For each {0} {1} {n...} replace with the argument in that position.  If 
    // the argument is an object or an array it will be stringified to JSON.
    for (i=0; i < len; arg = arguments[i++]) {
      safe = typeof arg === 'object' ? JSON.stringify(arg) : arg;
      str = str.replace(RegExp('\\{'+(i-1)+'\\}', 'g'), safe);
    }
    return str;
  }
 
  // Save a reference of what may already exist under the property native.  
  // Allows for doing something like: if("".format.native) { /* use native */ }
  format.native = String.prototype.format;
 
  // Replace the prototype property
  return format;
 
}();


// Based on code from Jonas Raoni Soares Silva
// http://jsfromhell.com/classes/binary-parser
function vscpws_encodeFloat(number) {
    var n = +number,
        status = (n !== n) || n == -Infinity || n == +Infinity ? n : 0,
        exp = 0,
        len = 281, // 2 * 127 + 1 + 23 + 3,
        bin = new Array(len),
        signal = (n = status !== 0 ? 0 : n) < 0,
        n = Math.abs(n),
        intPart = Math.floor(n),
        floatPart = n - intPart,
        i, lastBit, rounded, j, exponent;

    if (status !== 0) {
        if (n !== n) {
            return 0x7fc00000;
        }
        if (n === Infinity) {
            return 0x7f800000;
        }
        if (n === -Infinity) {
            return 0xff800000
        }
    }

    i = len;
    while (i) {
        bin[--i] = 0;
    }

    i = 129;
    while (intPart && i) {
        bin[--i] = intPart % 2;
        intPart = Math.floor(intPart / 2);
    }

    i = 128;
    while (floatPart > 0 && i) {
        (bin[++i] = ((floatPart *= 2) >= 1) - 0) && --floatPart;
    }

    i = -1;
    while (++i < len && !bin[i]);

    if (bin[(lastBit = 22 + (i = (exp = 128 - i) >= -126 && exp <= 127 ? i + 1 : 128 - (exp = -127))) + 1]) {
        if (!(rounded = bin[lastBit])) {
            j = lastBit + 2;
            while (!rounded && j < len) {
                rounded = bin[j++];
            }
        }

        j = lastBit + 1;
        while (rounded && --j >= 0) {
            (bin[j] = !bin[j] - 0) && (rounded = 0);
        }
    }
    i = i - 2 < 0 ? -1 : i - 3;
    while(++i < len && !bin[i]);
    (exp = 128 - i) >= -126 && exp <= 127 ? ++i : exp < -126 && (i = 255, exp = -127);
    (intPart || status !== 0) && (exp = 128, i = 129, status == -Infinity ? signal = 1 : (status !== status) && (bin[i] = 1));

    n = Math.abs(exp + 127);
    exponent = 0;
    j = 0;
    while (j < 8) {
        exponent += (n % 2) << j;
        n >>= 1;
        j++;
    }

    var mantissa = 0;
    n = i + 23;
    for (; i < n; i++) {
        mantissa = (mantissa << 1) + bin[i];
    }
    return ((signal ? 0x80000000 : 0) + (exponent << 23) + mantissa) | 0;
}


///////////////////////////////////////////////////////////////////////////////
// vscpws_littleEndian
//
// Return true for little endian/false for big endian
//

var vscpws_littleEndian = (function() {
    var buffer = new ArrayBuffer(2);
    new DataView(buffer).setInt16(0, 256, true);
    return new Int16Array(buffer)[0] === 256;
})();

///////////////////////////////////////////////////////////////////////////////
// vscpws_checkEndian
//
// Byte swap word and dword
//

function vscpws_swapBytes(buf, size)
{

    var bytes = Uint8Array(buf);
    var len = bytes.length;
 
    if (size == 'WORD'){
        var holder;
        for(var i =0; i<len; i+=2){
            holder = bytes[i];
            bytes[i] = bytes[i+1];
            bytes[i+1] = holder;
        }
    } 
    else if(size == 'DWORD'){
        var holder;
        for(var i =0; i<len; i+=4){
            holder = bytes[i];
            bytes[i] = bytes[i+3];
            bytes[i+3] = holder;
            holder = bytes[i+1];
            bytes[i+1] = bytes[i+2];
            bytes[i+2] = holder;
        }
    }
}

///////////////////////////////////////////////////////////////////////////////
// vscpws_sleep
//

function vscpws_sleep( milliseconds ) {
  var start = new Date().getTime();
  for (var i = 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds){
      break;
    }
  }
}

///////////////////////////////////////////////////////////////////////////////
// vscpws_toFixed
//

function vscpws_toFixed(value, precision) {
    var power = Math.pow(10, precision || 0);
    return String((Math.round(value * power) / power).toFixed(precision));
}

///////////////////////////////////////////////////////////////////////////////
// BrowserDetect
//
// Detect wich browser that is used.
//
// BrowserDetect came from http://www.quirksmode.org/js/detect.html
//
// Example usage:
// document.getElementById("brow").textContent = " " + BrowserDetect.browser + " "
//	+ BrowserDetect.version +" " + BrowserDetect.OS +" ";
//

var vscpws_browserDetect = {
init: function() {
this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
        this.version = this.searchVersion(navigator.userAgent)
        || this.searchVersion(navigator.appVersion)
        || "an unknown version";
        this.OS = this.searchString(this.dataOS) || "an unknown OS";
        },
        searchString: function(data) {
for (var i = 0; i < data.length; i++) {
var dataString = data[i].string;
        var dataProp = data[i].prop;
        this.versionSearchString = data[i].versionSearch || data[i].identity;
        if (dataString) {
if (dataString.indexOf(data[i].subString) != - 1)
        return data[i].identity;
        }
else if (dataProp)
        return data[i].identity;
        }
},
        searchVersion: function(dataString) {
var index = dataString.indexOf(this.versionSearchString);
        if (index == - 1)
        return;
        return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));
        },
        dataBrowser: [
        {
        string: navigator.userAgent,
                subString: "Chrome",
                identity: "Chrome"
                },
        {string: navigator.userAgent,
                subString: "OmniWeb",
                versionSearch: "OmniWeb/",
                identity: "OmniWeb"
                },
        {
        string: navigator.vendor,
                subString: "Apple",
                identity: "Safari",
                versionSearch: "Version"
                },
        {
        prop: window.opera,
                identity: "Opera",
                versionSearch: "Version"
                },
        {
        string: navigator.vendor,
                subString: "iCab",
                identity: "iCab"
                },
        {
        string: navigator.vendor,
                subString: "KDE",
                identity: "Konqueror"
                },
        {
        string: navigator.userAgent,
                subString: "Firefox",
                identity: "Firefox"
                },
        {
        string: navigator.vendor,
                subString: "Camino",
                identity: "Camino"
                },
        {// for newer Netscapes (6+)
        string: navigator.userAgent,
                subString: "Netscape",
                identity: "Netscape"
                },
        {
        string: navigator.userAgent,
                subString: "MSIE",
                identity: "Explorer",
                versionSearch: "MSIE"
                },
        {
        string: navigator.userAgent,
                subString: "Gecko",
                identity: "Mozilla",
                versionSearch: "rv"
                },
        {// for older Netscapes (4-)
        string: navigator.userAgent,
                subString: "Mozilla",
                identity: "Netscape",
                versionSearch: "Mozilla"
                }
],
        dataOS: [
        {
        string: navigator.platform,
                subString: "Win",
                identity: "Windows"
                },
        {
        string: navigator.platform,
                subString: "Mac",
                identity: "Mac"
                },
        {
        string: navigator.userAgent,
                subString: "iPhone",
                identity: "iPhone/iPod"
                },
        {
        string: navigator.platform,
                subString: "Linux",
                identity: "Linux"
                }
]

};

vscpws_browserDetect.init();


/////////////////////////////////////////////////////////////////////////////
// vscpws_get_appropriate_ws_url
//

function vscpws_get_appropriate_ws_url(url) {
    
    var pcol;
    var u = document.URL;
    
    /*
     * We open the websocket encrypted if this page came on an
     * https:// url itself, otherwise unencrypted
     */
    
    if (u.substring(0, 5) == "https") {
        pcol = "wss://";
        u = u.substr(8);
    } 
    else {
        pcol = "ws://";
        if (u.substring(0, 4) == "http") {
            u = u.substr(7);
        }
    }

    u = u.split('/');
    return pcol + u[0];
    //return "ws://localhost:7681"
}

/////////////////////////////////////////////////////////////////////////////
// vscp_make_websocket_auth_hash
//
// This function calculate the hash a client should answer with after
// getting a servers authentication challenge.
// 
// It requires md5.js to be included.
//

function vscp_make_websocket_auth_hash( user, password, sid ){
	return hex_md5( user + ":" + password + ":" + sid ); 
};


function vscpws_varInteger2Float( data ) {    
    var rval = 0.0;

    var bNegative = false;
    
    if ( data[0] & 0x80 ) {    
        bNegative = true;
    
        for ( i=0; i<data.length; i++ ) {
            data[i] = ~data[i] & 0xff; 
        }
    }
        
    for (i=0;i<data.length;i++) {
        rval = rval << 8;
        rval += data[i];
    }
            
    if ( bNegative ) {
        rval = -1.0 * (rval + 1);
    }

    //console.log( data.length );
    //console.log( rval );
    return rval;
}

/////////////////////////////////////////////////////////////////////////////
// vscpws_getDatacoding
//

function vscpws_getDatacoding(data) {
    return (data >> 5) & 7;
}

/////////////////////////////////////////////////////////////////////////////
// vscpws_getDatacodingUnit
//

function vscpws_getDatacodingUnit(data) {
    return (data >> 3) & 3;
}

/////////////////////////////////////////////////////////////////////////////
// vscpws_getSensorIndexFromDataCodin
//

function vscpws_getSensorIndexFromDataCoding(data) {
    return data & 7;
}

/////////////////////////////////////////////////////////////////////////////
// vscpws_measurementClass10Decode
//
// data is event data array where first databyte is datacoding
// Always return float.

function vscpws_measurementClass10Decode(data){
    
    var rval = 0.0;
    var mask = 0;
        
    switch ( vscpws_getDatacoding(data[0]) ){
        case 0: // Bits
        case 1: // Bytes
        case 3: // Integer   
            {
                var newdata = new Array(data.length-1);
                
                for (i=1;i<data.length;i++) {
                    newdata[i-1] = data[i];
                }
                rval = vscpws_varInteger2Float( newdata );
            }
            break;

        case 2: // String
            {
                var str = new String();
                for (i=1;i<data.length;i++) {
                    str +=  String.fromCharCode(data[i]);
                }
                rval = parseFloat(str);
            }
            break;
        case 4: // Normalized integer
            {
                var exp = data[1];
                var newdata = new Array(data.length-2);
                
                for (i=2;i<data.length;i++) {
                    newdata[i-2] = data[i];
                }
                
                rval = vscpws_varInteger2Float( newdata );
              
                // Handle mantissa
                if ( exp & 0x80 ) {
                    exp &= 0x7f;
                    rval = rval * Math.pow(10,exp);
                }
                else { 
                    rval = rval / Math.pow(10,exp);
                }
                
            }
            break;
        case 5: // Floating point
            {
                if (5 == data.length) {
                    var sign = data[1] & 0x80;  // Negative if != 0
                    var exp = (data[1] & 0x7f) << 1 + (data[2] & 0x80) ? 1 : 0;
                    var mantissa = (data[2] & 0x7f) << 16 + data[3] << 8 + data[4];
                    // sign * 2^exponent * mantissa
                    rval = Math.pow(2,exp) * mantissa;
                    if (sign) rval = -1*rval;
                }
            }
            break;
        case 6: // Reserved
            break;
        case 7: // Reserved
            break;        
    }
    
    return rval;
}

/////////////////////////////////////////////////////////////////////////////
// vscpws_measurementClass60DecodeNumber
//
//

function vscpws_measurementClass60DecodeNumber(data) {
    if (8 == data.length) {
	
        var sign = data[0] & 0x80;  // Negative if != 0
        var exp = (data[0] & 0x7f) << 4 + (data[1] & 0xf0)>>4;
        var mantissa = (data[1] & 0x0f) << 48 +
                            data[2] << 40 +
                            data[3] << 32 + 
                            data[4] << 24 +
                            data[5] << 16 +
                            data[6] << 8 +
                            data[7];
        // sign * 2^exponent * mantissa
        rval = pow(2, exp) * mantissa;
        if (sign) rval = -1 * rval;
        
    }
}

/////////////////////////////////////////////////////////////////////////////
// vscpws_measurementClass65DecodeNumber
//
//

function vscpws_measurementClass65DecodeNumber(data)
{
    var rval = 0;

    var exp = data[3];

    for (i = 4; i < data.length; i++) {
        rval = rval << 8;
        rval += data[i];
    }
    
    // Handle exponent 
    if (exp & 128) {
        exp &= 0x7f;
        rval = rval * pow(10, (-1 * exp))
    }
    else {
        rval = rval * pow(10, exp)
    }

    return rval;
}

// https://gist.github.com/tbranyen/1049426
// Inspired by http://bit.ly/juSAWl
// Augment String.prototype to allow for easier formatting.  This implementation 
// doesn't completely destroy any existing String.prototype.format functions,
// and will stringify objects/arrays.
String.prototype.format = function(i, safe, arg) {
 
  function format() {
    var str = this, len = arguments.length+1;
 
    // For each {0} {1} {n...} replace with the argument in that position.  If 
    // the argument is an object or an array it will be stringified to JSON.
    for (i=0; i < len; arg = arguments[i++]) {
      safe = typeof arg === 'object' ? JSON.stringify(arg) : arg;
      str = str.replace(RegExp('\\{'+(i-1)+'\\}', 'g'), safe);
    }
    return str;
  }
 
  // Save a reference of what may already exist under the property native.  
  // Allows for doing something like: if("".format.native) { /* use native */ }
  format.native = String.prototype.format;
 
  // Replace the prototype property
  return format;
 
}();

/////////////////////////////////////////////////////////////////////////////
// vscpws_convertFahrenheitToKelvin
//

function vscpws_convertFahrenheitToKelvin(value) {
    var fTempVal = "string" == typeof value ? parseFloat(value) : value;
    var cTempVal = (fTempVal - 32) * (5 / 9) + 273.15;
    return cTempVal;
}

/////////////////////////////////////////////////////////////////////////////
// vscpws_convertFahrenheitToCelsius
//

function vscpws_convertFahrenheitToCelsius(value) {
    var fTempVal = "string" == typeof value ? parseFloat(value) : value;
    var cTempVal = (fTempVal - 32) * (5 / 9);
    return cTempVal;
}

/////////////////////////////////////////////////////////////////////////////
// vscpws_convertCelsiusToFahrenheit
//

function vscpws_convertCelsiusToFahrenheit(value) {
    var cTempVal = "string" == typeof value ? parseFloat(value) : value;
    var fTempVal = (cTempVal * (9 / 5)) + 32;
    return fTempVal;
}

/////////////////////////////////////////////////////////////////////////////
// vscpws_convertKelvinToCelsius
//

function vscpws_convertKelvinToCelsius(value) {
    var kTempVal = "string" == typeof value ? parseFloat(value) : value;
    var cTempVal = kTempVal - 273.15;
    return cTempVal;
}

/////////////////////////////////////////////////////////////////////////////
// vscpws_convertCelsiusToKelvin
//

function vscpws_convertCelsiusToKelvin(value) {
    var kTempVal = "string" == typeof value ? parseFloat(value) : value;
    var cTempVal = kTempVal + 273.15;
    return cTempVal;
}

/////////////////////////////////////////////////////////////////////////////
// vscpws_convertKelvinToFahrenheit
//

function vscpws_convertKelvinToFahrenheit(value) {
    var kTempVal = "string" == typeof value ? parseFloat(value) : value;
    var cTempVal = kTempVal + 273.15;
    return vscpws_convertCelsiusToFahrenheit(cTempVal);
}


/////////////////////////////////////////////////////////////////////////////
// vscpws_convertMeterToFeet
//

function vscpws_convertMeterToFeet(value) {
    var fTempVal = "string" == typeof value ? parseFloat(value) : value;
    return fTempVal* 3.2808399;
}

/////////////////////////////////////////////////////////////////////////////
// vscpws_convertFeetToMeter
//

function vscpws_convertFeetToMeter(value) {
    var fTempVal = "string" == typeof value ? parseFloat(value) : value;
    return fTempVal* 0.3048;
}

/////////////////////////////////////////////////////////////////////////////
// vscpws_convertMeterToInch
//

function vscpws_convertMeterToInch(value) {
    var fTempVal = "string" == typeof value ? parseFloat(value) : value;
    return fTempVal* 3.2808399 * 12;
}

/////////////////////////////////////////////////////////////////////////////
// vscpws_convertInchToMeter
//

function vscpws_convertInchToMeter(value) {
    var fTempVal = "string" == typeof value ? parseFloat(value) : value;
    return fTempVal* 0.3048/12;
}


/////////////////////////////////////////////////////////////////////////////
// vscpws_units
//

var vscpws_units = [];
// Generic
vscpws_units[0] = new Array();
// Count
vscpws_units[1] = new Array();
// Length/Distance
vscpws_units[2] = new Array("Meter");
// Mass
vscpws_units[3] = new Array("Kilogram");
// Time
vscpws_units[4] = new Array("Millisecond","Seconds");
// Electrical Current
vscpws_units[5] = new Array("Ampere");
// Temperature
vscpws_units[6] = new Array("Kelvin","Celsius","Fahrenheit");
// Amount of substance
vscpws_units[7] = new Array("Mole");
// Luminous Intensity (Intensity of light)
vscpws_units[8] = new Array("Candela");
// Frequency
vscpws_units[9] = new Array("Hertz");
// Radioactivity and other random events
vscpws_units[10] = new Array("Becquerel");
// Force
vscpws_units[11] = new Array("Newton");
// Pressure
vscpws_units[12] = new Array("Pascal","Bar","Psi");
// Energy
vscpws_units[13] = new Array("Joule");
// Power
vscpws_units[14] = new Array("Watt");
// Electrical Charge
vscpws_units[15] = new Array("Coulomb");
// Electrical Potential (Voltage)
vscpws_units[16] = new Array("Volt");
// Electrical Capacitance
vscpws_units[17] = new Array("Farad");
// Electrical Resistance
vscpws_units[18] = new Array("Ohm");
// Electrical Conductance
vscpws_units[19] = new Array("Siemens");
// Magnetic Field Strength
vscpws_units[20] = new Array("Ampere meters");
// Magnetic Flux
vscpws_units[21] = new Array("Weber");
// Magnetic Flux Density
vscpws_units[22] = new Array("Tesla");
// Inductance
vscpws_units[23] = new Array("Henry");
// Luminous Flux
vscpws_units[24] = new Array("Lumen");
// Illuminance
vscpws_units[25] = new Array("Lux");
// Radiation dose
vscpws_units[26] = new Array("Gray","Sievert");
// Catalytic activity
vscpws_units[27] = new Array("Katal");
// Volume
vscpws_units[28] = new Array("Cubic meter","Liter");
// Sound intensity
vscpws_units[29] = new Array("Bel","Neper","dB");
// Angle
vscpws_units[30] = new Array("Rad","Degree","Arcminute","Arcseconds");
// Position
vscpws_units[31] = new Array("Longitude","Latitude");
// Speed
vscpws_units[32] = new Array("Meters per second");
// Acceleration
vscpws_units[33] = new Array("Meters per second/second");
// Tension
vscpws_units[34] = new Array("N/m");
// Damp/moist (Hygrometer reading)
vscpws_units[35] = new Array("%");
// Flow
vscpws_units[36] = new Array("Cubic meters/second","Liter/Second");
// Thermal resistance
vscpws_units[37] = new Array("K/W");
//  Refractive power
vscpws_units[38] = new Array("Dioptre");
// Dynamic viscosity
vscpws_units[39] = new Array("Poiseuille");
// Sound impedance
vscpws_units[40] = new Array("Rayal");
// Sound resistance
vscpws_units[41] = new Array("Acoustic ohm");
// Electric elastance
vscpws_units[42] = new Array("Darag");
// Luminous energy
vscpws_units[43] = new Array("Talbot");
// Luminance
vscpws_units[44] = new Array("Nit");
// Chemical concentration
vscpws_units[45] = new Array("Molal");
// Reserved
vscpws_units[46] = new Array("Reserved");
// Dose equivalent
vscpws_units[47] = new Array("Sievert");
// Reserved
vscpws_units[48] = new Array("Reserved");
// Dew Point
vscpws_units[49] = new Array("Levin","Celsius","Fahrenheit");
// Relative Level
vscpws_units[50] = new Array("Relative");
// Altitude
vscpws_units[51] = new Array("Meter","Feet","Inches");
// Area
vscpws_units[52] = new Array("Square meter");
// Radiant intensity
vscpws_units[53] = new Array("Watt per steradian");
// Radiance
vscpws_units[54] = new Array("Att per steradian per square metre");
// Irradiance, Exitance, Radiosity
vscpws_units[55] = new Array("Watt per square metre");
// Spectral radiance
vscpws_units[56] = new Array("Watt per steradian per square metre per nm");
// Spectral irradiance
vscpws_units[57] = new Array("Watt per square metre per nm");

/////////////////////////////////////////////////////////////////////////////
// vscpws_openSocket
//

function vscpws_openSocket(url) {
    
    socket = null;
    
    socket = new WebSocket( url ); 
 /*   
    if (vscpws_browserDetect.browser == "Firefox" && vscpws_browserDetect.version < 12) {
        socket = new MozWebSocket(vscpws_get_appropriate_ws_url()url,
                                         "very-simple-control-protocol");
    } 
    else {
        socket = new WebSocket(vscpws_get_appropriate_ws_url()url,
                                         "very-simple-control-protocol");                              
    }
 */   
    return socket;
}

/////////////////////////////////////////////////////////////////////////////
// findPosX
//
// Finds the absolute X position for an object.
//
// by Peter-Paul Koch & Alex Tingle. 
// http://www.quirksmode.org/about/copyright.html
// http://blog.firetree.net/2005/07/04/javascript-find-position/
//

function vscpws_findPosX(obj)
{
	var curleft = 0;
        if (obj.offsetParent) {
		while (1) {
			curleft += obj.offsetLeft;
        		if (!obj.offsetParent) {
				break;
			}
			obj = obj.offsetParent;
		}
	}
	else if (obj.x) {
		curleft += obj.x;
	}

	return curleft;
}

/////////////////////////////////////////////////////////////////////////////
// findPosY
//
// Finds the absolute Y position for an object.	
//
// by Peter-Paul Koch & Alex Tingle. 
// http://www.quirksmode.org/about/copyright.html
// http://blog.firetree.net/2005/07/04/javascript-find-position/
//

function vscpws_findPosY(obj)
{
	var curtop = 0;
        if (obj.offsetParent) {
		while (1) {
			curtop += obj.offsetTop;
			if (!obj.offsetParent) {
				break;
			}
			obj = obj.offsetParent;
		}
	}
	else if (obj.y) {
		curtop += obj.y;
	}
	
	return curtop;
}

/////////////////////////////////////////////////////////////////////////////
// loadScript
//
// Load a javascript from 'url'
//
// usage: 
// var myPrettyCode = function() {
// 		here, do what ever you want
// };
//
// Then you run all that :
//
// loadScript("my_lovely_script.js", myPrettyCode);
//

function vscpws_loadScript(url, callback)
{
// adding the script tag to the head as suggested before
var head = document.getElementsByTagName('head')[0];
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = url;
        // then bind the event to the callback function 
        // there are several events for cross browser compatibility
        script.onreadystatechange = callback;
        script.onload = callback;
        // fire the loading
        head.appendChild(script);
}


/*
	Developed by Robert Nyman, http://www.robertnyman.com
	Code/licensing: http://code.google.com/p/getelementsbyclassname/
*/	
var getElementsByClassName = function (className, tag, elm){
	if (document.getElementsByClassName) {
		getElementsByClassName = function (className, tag, elm) {
			elm = elm || document;
			var elements = elm.getElementsByClassName(className),
				nodeName = (tag)? new RegExp("\\b" + tag + "\\b", "i") : null,
				returnElements = [],
				current;
			for(var i=0, il=elements.length; i<il; i+=1){
				current = elements[i];
				if(!nodeName || nodeName.test(current.nodeName)) {
					returnElements.push(current);
				}
			}
			return returnElements;
		};
	}
	else if (document.evaluate) {
		getElementsByClassName = function (className, tag, elm) {
			tag = tag || "*";
			elm = elm || document;
			var classes = className.split(" "),
				classesToCheck = "",
				xhtmlNamespace = "http://www.w3.org/1999/xhtml",
				namespaceResolver = (document.documentElement.namespaceURI === xhtmlNamespace)? xhtmlNamespace : null,
				returnElements = [],
				elements,
				node;
			for(var j=0, jl=classes.length; j<jl; j+=1){
				classesToCheck += "[contains(concat(' ', @class, ' '), ' " + classes[j] + " ')]";
			}
			try	{
				elements = document.evaluate(".//" + tag + classesToCheck, elm, namespaceResolver, 0, null);
			}
			catch (e) {
				elements = document.evaluate(".//" + tag + classesToCheck, elm, null, 0, null);
			}
			while ((node = elements.iterateNext())) {
				returnElements.push(node);
			}
			return returnElements;
		};
	}
	else {
		getElementsByClassName = function (className, tag, elm) {
			tag = tag || "*";
			elm = elm || document;
			var classes = className.split(" "),
				classesToCheck = [],
				elements = (tag === "*" && elm.all)? elm.all : elm.getElementsByTagName(tag),
				current,
				returnElements = [],
				match;
			for(var k=0, kl=classes.length; k<kl; k+=1){
				classesToCheck.push(new RegExp("(^|\\s)" + classes[k] + "(\\s|$)"));
			}
			for(var l=0, ll=elements.length; l<ll; l+=1){
				current = elements[l];
				match = false;
				for(var m=0, ml=classesToCheck.length; m<ml; m+=1){
					match = classesToCheck[m].test(current.className);
					if (!match) {
						break;
					}
				}
				if (match) {
					returnElements.push(current);
				}
			}
			return returnElements;
		};
	}
	return getElementsByClassName(className, tag, elm);
};


///////////////////////////////////////////////////////////////////////////////
// vscpws_obSub
//

function vscpws_obSub(ob) {
    var r = [];
    var i = 0;
    for (var z in ob) {
        if (ob.hasOwnProperty(z)) {
            r[i++] = z;
        }
    }
    return r;
}

///////////////////////////////////////////////////////////////////////////////
// vscpws_getVarName
//

function vscpws_getVarName(variable) {
    return vscpws_obSub(window).map(function(a) {
        if (window[a] === variable) {
            return a
        }
        }).sort()[0]
}

///////////////////////////////////////////////////////////////////////////////
// vscpws_global_mouseover
//

function vscpws_global_mouseover(obj) {
    //obj.onOver();
    //alert(obj.toString());
    //alert(obj);
    obj.src = "../lib/widgets/button/presson.png";
}


